/* eslint-env node */
const EVENT_CALLBACK = Symbol('callback');
const CUTTLE_GENERATION_KEY = '* Generated by cuttle.js ';

function createProperty(sourceNode, identifierNode, typeNode, defaultNode, observedNode)
{
    return {
        source: sourceNode,
        name: identifierNode,
        type: typeNode,
        value: defaultNode,
        observed: observedNode,
    };
}

function createCustomEvent(sourceNode, identifierNode)
{
    return {
        source: sourceNode,
        name: identifierNode,
    };
}

function isPropertyStaticallyObserved(property)
{
    return property.observed.type === 'BooleanLiteral' && property.observed.value;
}

function isPropertyStaticallyUnobserved(property)
{
    return property.observed.type === 'BooleanLiteral' && !property.observed.value;
}

function isPropertyEventCallbackType(property)
{
    return property.type.type === EVENT_CALLBACK;
}

function isPropertyStringType(property)
{
    return property.type.name === 'String';
}

function isPropertyBooleanType(property)
{
    return property.type.name === 'Boolean';
}

function hasPropertyDefaultValue(property)
{
    return property.value
        && (
            property.value.type !== 'Identifier'
            || property.value.name !== 'undefined'
        );
}

function getPropertyTypeNode(property)
{
    return property.type;
}

function getPropertyDefaultValueNode(property)
{
    return property.value;
}

function getPropertyObservedNode(property)
{
    return property.observed;
}

function getPropertySourceNode(property)
{
    return property.source;
}

module.exports = {
    EVENT_CALLBACK,
    CUTTLE_GENERATION_KEY,
    createProperty,
    createCustomEvent,
    getPropertyTypeNode,
    getPropertyDefaultValueNode,
    getPropertyObservedNode,
    getPropertySourceNode,
    isPropertyEventCallbackType,
    isPropertyBooleanType,
    isPropertyStringType,
    isPropertyStaticallyObserved,
    isPropertyStaticallyUnobserved,
    hasPropertyDefaultValue
};
